list2env(func_list, envir = .GlobalEnv)
}
View(future_mapper_template)
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template()
library(tidyverse)
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template()
View(future_mapper)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
library(tidyverse)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template()
View(future_mapper)
library(tidyverse)
#'
#' @return
#' A vector the same length as .x.
#' future_mapper_template
#' @export
future_mapper_template <- function(...) {
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper_template()
exist(future_mapper)
exists(future_mapper)
exists(future_mapper())
exists("future_mapper")
future_mapper %in% future_mapper_template()
future_mapper == future_mapper_template()
future_mapper = future_mapper_template()
View(future_mapper)
View(future_mapper)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper_template
future_mapper_template()
library(tidyverse)
future_mapper_template()
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
1:10 %>%
future_mapper_template(rnorm, n = 10)
library(tidyverse)
1:10 %>%
future_mapper_template(rnorm, n = 10)
1:10 %>%
future_mapper_template()(rnorm, n = 10)
1:10 %>%
future_mapper_template() %>% future_mapper(rnorm, n = 10)
1:10  %>% future_mapper(rnorm, n = 10)
1:10  %>% future_map(rnorm, n = 10)
library(furrr)
1:10  %>% future_map(rnorm, n = 10)
View(future_mapper)
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper <- function(...) {
future_mapper_template()
if (exists(future_mapper)) {
return(future_mapper)
}
}
future_mapper
future_mapper()
1:10 %>%
future_mapper(rnorm, n = 10)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- function(...) {
future_mapper_template()
if (exists(future_mapper)) {
return(future_mapper)
}
}
library(tidyverse)
1:10 %>%
future_mapper(rnorm, n = 10)
View(future_mapper)
View(future_mapper_chr)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- function(...) {
future_mapper_template()
if (exists(future_mapper)) {
future_mapper <- future_mapper()
}
}
View(future_mapper)
View(future_mapper_chr)
library(tidyverse)
1:10 %>%   future_mapper(rnorm, n = 10)
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper %>% future_mapper_template()
library(tidyverse)
#' future_invoke_mapper
#' @rdname future_mapper
#' @export
future_mapper %>% future_mapper_template()
library(devtools)
load_all()
document()
document()
check()
document()
check()
document()
check()
View(future_mapper_dbl)
document()
check()
document()
check()
check()
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- function(...) {
future_mapper_template()
}
View(future_mapper)
future_mapper()
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
devtools::install_github("haihuilab/mapper")
# Example
library(mapper)
1:10 %>%
future_mapper(rnorm, n = 10)
library(tidyverse)
1:10 %>%
future_mapper(rnorm, n = 10)
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
devtools::install_github("haihuilab/mapper")
check()
library(devtools)
check()
future_mapper_template <- function(...) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
map_func <- function(i) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
}
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% stats::setNames(mapper_list)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
#' future_mapper
#' @param ... Input parameter
#' @return Output result
#' @name future_mapper
#' @export
future_mapper1 <- function(...) {
future_mapper_template()
future_mapper(...)
}
1:10 %>%
future_mapper1(rnorm, n = 10)
