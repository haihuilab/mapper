.progress = FALSE) {
# map function
body(func)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233333)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233333)) %>%
future_map_dbl(mean)
my_function <- function(x) {
# Perform some operation on x
x_squared <- x^2
return(x_squared)
}
# Usage example
input <- 1:5
result <- future_map(input, my_function)
print(result)
future_mapper <-  function() {
# shut down multicore and clear cache
plan(sequential)
gc()
}
# Usage example
input <- 1:5
result <- future_map(..., future_mapper)
result <- future_map(future_mapper)
result <- future_map(.x,
.f,
...,
.options = furrr_options(),
.env_globals = parent.frame(),
.progress = FALSE,
future_mapper)
result <- future_map(future_mapper,
.x,
.f,
...,
.options = furrr_options(),
.env_globals = parent.frame(),
.progress = FALSE
)
# 2. future_mapper_chr:future_map_chr------------------------
mapper_func <- function(i) {
inner_func <- i
output <-  function(
.x,
.f,
...,
.options = furrr_options(),
.env_globals = parent.frame(),
.progress = FALSE) {
# map function
inner_func
# shut down multicore and clear cache
plan(sequential)
gc()
}
return(output)
}
# 2. future_mapper_chr:future_map_chr------------------------
map_func <- function(i) {
inner_func <- i
output <-  function(
.x,
.f,
...,
.options = furrr_options(),
.env_globals = parent.frame(),
.progress = FALSE) {
# map function
inner_func
# shut down multicore and clear cache
plan(sequential)
gc()
}
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% setNames(mapper_list)
func_list <- map(map_list, function(i) map_func(i)) %>% setNames(mapper_list)
View(func_list)
func_list[["future_mapper"]]
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233657333)) %>%
future_map_dbl(mean)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
View(future_mapper)
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 133)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 133)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
source("~/software/R_packages/maper/R/future_mapper.R", echo=TRUE)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1223433)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, ) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100, seed=TRUE) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100) %>%
future_mapper_dbl(mean)
??future_map
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = TRUE)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = TRUE)) %>%
future_mapper_dbl(mean)
# Run the removing cache function
# 1. future_mapper:future_map------------------------
future_mapper <- function(.x,
.f,
...,
.options = furrr_options(seed = TRUE),
.env_globals = parent.frame(),
.progress = FALSE) {
future_map(.x,
.f,
...,
.options = furrr_options(),
.env_globals = parent.frame(),
.progress = FALSE)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = TRUE)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = 123)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = 123)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 100, .options = furrr_options(seed = 12322)) %>%
future_mapper_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 123)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1223)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
# plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1223)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
# plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
future_map(...)
# shut down multicore and clear cache
# plan(sequential)
# gc()
}
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
future_map(...)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 12233)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
future_map(...)
# shut down multicore and clear cache
plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
future_map(...)
# shut down multicore and clear cache
# plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 133)) %>%
future_map_dbl(mean)
library(future)
# Define a function that takes some time to execute
my_function <- function() {
Sys.sleep(5)  # Simulate some time-consuming task
return("Finished executing")
}
# Create a future for the function
future_result <- future({ my_function() })
# Wait for the future to be finished
wait(future_result)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
future_map(...)
Sys.sleep(5)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 133)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
future_map(...)
Sys.sleep(5)
# shut down multicore and clear cache
plan(sequential)
# gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
# 1. future_mapper:future_map------------------------
future_mapper <- function(...) {
plan(multisession, workers = 4)
options(future.globals.maxSize = 5000000000)
res <- future_map(...)
return(res)
# shut down multicore and clear cache
plan(sequential)
gc()
}
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 133)) %>%
future_map_dbl(mean)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
# 2. future_mapper_chr:future_map_chr------------------------
map_func <- function(i) {
inner_func <- i
output <-  function(...) {
# map function
res <- inner_func(...)
return(res)
# shut down multicore and clear cache
plan(sequential)
gc()
}
return(output)
}
func_list <- map(map_list, function(i) map_func(i)) %>% setNames(mapper_list)
View(func_list)
func_list[["future_mapper"]]
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233)) %>%
future_map_dbl(mean)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 123)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1243)) %>%
future_map_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1243)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1242343)) %>%
future_mapper_dbl(mean)
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1242343)) %>%
future_map_dbl(mean)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
# shut down multicore and clear cache
plan(sequential)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
source("~/software/R_packages/maper/R/future_mapper (copy).R", echo=TRUE)
library(furrr)
??future_pmap
??future_pmap
library(furrr)
library(devtools)
load_all()
check()
library(furrr)
check()
use_mit_license()
document()
walk("furrr", use_package)
walk("tidyverse", use_package)
check()
library(tidyverse)
check()
check()
check()
walk("dplyr", use_package)
check()
check()
walk("purrr", use_package)
use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
use_github()
gh_token_help()
gitcreds::gitcreds_set()
use_github()
library(devtools)
load_all()
install()
document()
create_package()
create_package("/home/figo/software/R_packages/mapper3")
use_testthat()
use_test(mapper)
check()
use_test()
check()
document()
R CMD build mapper
document()
check()
check()
check()
check()
check()
install()
load_all()
check()
check()
check()
check()
check()
document()
check()
load_all()
library(devtools)
load_all()
check()
document()
check()
use_mit_license()
install()
use_testthat()
use_test()
check()
library(devtools)
use_git()
use_r(mapper)
load_all()
check()
source("~/software/R_packages/mapper/R/future_imapper.R", echo=TRUE)
library(devtools)
load_all()
library(devtools)
load_all()
check()
document()
library(devtools)
load_all()
check()
document()
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
load_all
library(devtools)
load_all()
check()
document()
walk("parallel", use_package)
library(tidyverse)
walk("parallel", use_package)
check()
use_testthat()
use_test(mapper)
use_test()
check()
install()
library(devtools)
load_all()
use_r(mapper)
check()
document()
library(tidyverse)
walk("dplyr", use_package)
check()
document()
check()
??stats::setNames
