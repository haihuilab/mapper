mapper_func <- function(i) {
inner_func <- i
output <-  function(...) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
# map function
res <- inner_func(...)
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(res)
}
return(output)
}
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper1 <- function(...) {
if (!exists("future_mapper", mode = "function")) {
future_mapper_template("future_mapper")
future_mapper(...)
} else {
future_mapper(...)
}
}
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper1(rnorm, n = 10, .options = furrr_options(seed = 1233))
future_mapper1 <- function(...) {
if (!exists("future_mapper1", mode = "function")) {
future_mapper_template("future_mapper")
future_mapper(...)
} else {
future_mapper(...)
}
}
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper1(rnorm, n = 10, .options = furrr_options(seed = 1233))
debug(future_mapper1)
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper1(rnorm, n = 10, .options = furrr_options(seed = 1233))
#' @export
future_mapper <- function(...) {
future_mapper_template("future_mapper")
future_mapper(...)
}
# Example
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
# Example
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
# Example
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
# Example
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapp(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1233))
debug(future_mapper)
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_map(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
debug(future_mapper)
future_mapper <- function(...) {
future_mapper_template("future_mapper")
future_mapper(...)
}
debug(future_mapper)
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
future_mapper_template <- function(arg) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
mapper_func <- function(i) {
inner_func <- i
output <-  function(...) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
# map function
res <- inner_func(...)
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(res)
}
return(output)
}
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
debug(future_mapper)
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
undebug(future_mapper)
library(devtools)
load_all()
document()
check()
use_version(1.0.2)
use_version("1.0.2")
use_version("patch")
use_version("patch")
future_mapper_template <- function(arg) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
mapper_func <- function(i) {
inner_func <- i
output <-  function(...) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
# map function
res <- inner_func(...)
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(res)
}
return(output)
}
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- function() {
future_mapper_template("future_mapper")
future_mapper(...)
}
library(tidyverse)
library(furrr)
# library(mapper)
# Remove cache when using furrr:map functions
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(devtools)
load_all()
load_all()
document()
library(future)
plan(sequential)
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
future_mapper_template <- function(arg) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
mapper_func <- function(i) {
inner_func <- i
output <-  function(...) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
# map function
res <- inner_func(...)
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(res)
}
return(output)
}
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
# Extract the functions as individual ones
list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- future_mapper_template("future_mapper")
library(tidyverse)
#' @export
future_mapper <- future_mapper_template("future_mapper")
1:10 %>%
future_mapper(rnorm, n = 10, .options = furrr_options(seed = 1233))
future_mapper_template <- function(arg) {
map_list <- c(furrr::future_map,
furrr::future_map_chr,
furrr::future_map_dbl,
furrr::future_map_dfc,
furrr::future_map_dfr,
furrr::future_map_int,
furrr::future_map_lgl,
furrr::future_walk)
mapper_list <- c("future_mapper",
"future_mapper_chr",
"future_mapper_dbl",
"future_mapper_dfc",
"future_mapper_dfr",
"future_mapper_int",
"future_mapper_lgl",
"future_mapper_walk")
# map function------------------------
mapper_func <- function(i) {
inner_func <- i
output <-  function(...) {
# Start multicore
future::plan(future::multisession, workers = parallel::detectCores()-2)
options(future.globals.maxSize = 5000000000)
# map function
res <- inner_func(...)
# shut down multicore and clear cache
future::plan(future::sequential)
gc()
return(res)
}
return(output)
}
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
# Extract the functions as individual ones
# list2env(func_list, envir = .GlobalEnv)
}
future_mapper <- future_mapper_template("future_mapper")
View(future_mapper)
View(future_mapper)
View(future_mapper)
future_mapper[["future_mapper"]]
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% unlist()
future_mapper_template("future_mapper") %>% unlist()
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% do.call(unlist)
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% list2env(envir = .GlobalEnv)
View(future_mapper)
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper")
future_mapper_template("future_mapper")
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% unlist(recursive = FALSE)
View(future_mapper)
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% do.call(unlist)
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% flatten()
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% purrr::flatten()
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% do.call(unlist( recursive=FALSE))
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>% do.call(c,unlist( recursive=FALSE))
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>%  unlist(recursive = FALSE)
#' future_invoke_mapper_chr
#' @rdname future_mapper_chr
#' @export
future_mapper_chr <- function(...) {
future_mapper_template("future_mapper_chr")
future_mapper_chr(...)
}
View(future_mapper)
unlist("future_mapper",recursive = FALSE)
unlist("future_mapper",recursive = FALSE)
unlist(future_mapper,recursive = FALSE)
a= unlist(future_mapper,recursive = FALSE)
View(a)
list2env(func_list, envir = .GlobalEnv)
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
arg = "future_mapper"
func_list <- map(map_list[which(mapper_list == arg)], function(i) mapper_func(i)) %>% stats::setNames(arg)
list2env(future_mapper, envir = .GlobalEnv)
#' future_invoke_mapper
#' @import future_mapper_template
#' @rdname future_mapper
#' @export
future_mapper <- future_mapper_template("future_mapper") %>%
list2env(future_mapper, envir = .GlobalEnv)
View(future_mapper)
library(devtools)
library(devtools)
load_all()
document()
check()
check()
library(devtools)
load_all()
document()
check()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
check()
library(devtools)
load_all()
document()
check()
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(tidyverse)
load_all()
library(devtools)
load_all()
document()
document()
install_github("haihuilab/thepubr")
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(devtools)
load_all()
document()
install_github('haihuilab/thepubr')
remove.packages("thepubr", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
install_github('haihuilab/thepubr')
install_github('haihuilab/mapper')
library(devtools)
load_all()
document()
install_github('haihuilab/mapper')
parallelly::availableCores()
(parallelly::availableCores()-2)
library(devtools)
load_all()
document()
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
install_github('hahuilab/mapper')
install_github('haihuilab/mapper')
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
devtools::install_github('haihuilab/mapper')
source("~/software/scell_skin_inflammation_master/scripts/IM10_GO_barplot_DE_scatterplot.R", echo=TRUE)
workers = NULL
is.null(workers)
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
library(devtools)
load_all()
document()
install_github('haihuilab/thepubr')
install_github('haihuilab/mapper')
library(devtools)
load_all()
document()
install_github('haihuilab/mapper')
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
document()
install_github('haihuilab/mapper')
library(devtools)
load_all()
documents()
document()
install_github('haihuilab/thepubr')
install_github('haihuilab/mapper')
library(devtools)
load_all()
check()
document()
remove.packages("mapper", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
install_github('haihuilab/mapper')
